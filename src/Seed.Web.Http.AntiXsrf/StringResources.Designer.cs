//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Seed.Web.Http.AntiXsrf {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class StringResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal StringResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Seed.Web.Http.AntiXsrf.StringResources", typeof(StringResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided anti-forgery token failed a custom data check..
        /// </summary>
        internal static string AntiForgeryToken_AdditionalDataCheckFailed {
            get {
                return ResourceManager.GetString("AntiForgeryToken_AdditionalDataCheckFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided anti-forgery token was meant for a different claims-based user than the current user..
        /// </summary>
        internal static string AntiForgeryToken_ClaimUidMismatch {
            get {
                return ResourceManager.GetString("AntiForgeryToken_ClaimUidMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required anti-forgery cookie &quot;{0}&quot; is not present..
        /// </summary>
        internal static string AntiForgeryToken_CookieMissing {
            get {
                return ResourceManager.GetString("AntiForgeryToken_CookieMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The anti-forgery token could not be decrypted. If this application is hosted by a Web Farm or cluster, ensure that all machines are running the same version of ASP.NET Web Pages and that the &lt;machineKey&gt; configuration specifies explicit encryption and validation keys. AutoGenerate cannot be used in a cluster..
        /// </summary>
        internal static string AntiForgeryToken_DeserializationFailed {
            get {
                return ResourceManager.GetString("AntiForgeryToken_DeserializationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required anti-forgery HTTP header &quot;{0}&quot; is not present..
        /// </summary>
        internal static string AntiForgeryToken_FormFieldMissing {
            get {
                return ResourceManager.GetString("AntiForgeryToken_FormFieldMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The anti-forgery cookie token and HTTP header token do not match..
        /// </summary>
        internal static string AntiForgeryToken_SecurityTokenMismatch {
            get {
                return ResourceManager.GetString("AntiForgeryToken_SecurityTokenMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation of the provided anti-forgery token failed. The cookie &quot;{0}&quot; and the HTTP header &quot;{1}&quot; were swapped..
        /// </summary>
        internal static string AntiForgeryToken_TokensSwapped {
            get {
                return ResourceManager.GetString("AntiForgeryToken_TokensSwapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided anti-forgery token was meant for user &quot;{0}&quot;, but the current user is &quot;{1}&quot;..
        /// </summary>
        internal static string AntiForgeryToken_UsernameMismatch {
            get {
                return ResourceManager.GetString("AntiForgeryToken_UsernameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The anti-forgery system has the configuration value AntiForgeryConfig.RequireSsl = true, but the current request is not an SSL request..
        /// </summary>
        internal static string AntiForgeryWorker_RequireSSL {
            get {
                return ResourceManager.GetString("AntiForgeryWorker_RequireSSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A claim of type &apos;{0}&apos; was not present on the provided ClaimsIdentity..
        /// </summary>
        internal static string ClaimUidExtractor_ClaimNotPresent {
            get {
                return ResourceManager.GetString("ClaimUidExtractor_ClaimNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A claim of type &apos;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier&apos; or &apos;http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider&apos; was not present on the provided ClaimsIdentity. To enable anti-forgery token support with claims-based authentication, please verify that the configured claims provider is providing both of these claims on the ClaimsIdentity instances it generates. If the configured claims provider instead uses a different claim type as a unique identif [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ClaimUidExtractor_DefaultClaimsNotPresent {
            get {
                return ResourceManager.GetString("ClaimUidExtractor_DefaultClaimsNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An HttpActionContext is required to perform this operation. Check that this operation is being performed during a web request..
        /// </summary>
        internal static string HttpActionContextUnavailable {
            get {
                return ResourceManager.GetString("HttpActionContextUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided identity of type &apos;{0}&apos; is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider setting the static property AntiForgeryConfig.AdditionalDataProvider to an instance of a type that can provide some form of unique identifier for the current user..
        /// </summary>
        internal static string TokenValidator_AuthenticatedUserWithoutUsername {
            get {
                return ResourceManager.GetString("TokenValidator_AuthenticatedUserWithoutUsername", resourceCulture);
            }
        }
    }
}
